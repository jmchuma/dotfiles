also - use CTRL-v CTRL-m to get a newline - will look like ^M but match newlines.

set paste
help bomb
set bomb
set nobomb


* serchs for the word under the cursor

:hide edit foo.txt -> hides current buffer and opens foo.txt for editing
:buffes -> list buffers
:buffer <num> -> opens buffer number <num>
:sbuffer <num> -> opens buffer in new window
:bnext		go to next buffer
:bprevious	go to previous buffer
:bfirst		go to the first buffer
:blast		go to the last buffer
:bdelete <num> -> removes buffers from list
:edit


:next
:next!
:wnext
:previous
:previous!
:wprevious
:args
:args foo.txt bar.java lala.py
:last
:first

:saveas foo.txt -> line :w foo.txt and then :e foo.txt
:file foo.txt -> changes name but does not write

WRAPPING
http://vimcasts.org/episodes/soft-wrapping-text/

with explicit brakes
:set textwidth=n
:set wrapmargin=n

with implicit brakes
:set wrap
:set linebreak
:set nolist  " list disables linebreak

move around "screen lines" with gk and gj

:set whichwrap+=<,>,[,]
This leaves h and l with their default behavior, but allows the left and right arrow keys to wrap around lines. (This is what I do, and it works well.)

You might also want to take a look at the backspace setting, to control how Backspace, Delete, Control+W, and Control+U work in Insert mode. I set mine like this:

:set backspace=indent,eol,start
That allows me to backspace over pretty much everything.


